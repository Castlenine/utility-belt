module.exports = {
	root: true,
	env: {
		es2024: true,
		node: true,
	},
	parser: '@typescript-eslint/parser',
	plugins: ['@typescript-eslint', 'import', 'no-loops', 'only-warn', 'prettier'],
	extends: [
		'plugin:@typescript-eslint/recommended',
		'plugin:@typescript-eslint/recommended-requiring-type-checking',
		'plugin:import/typescript',
		'plugin:security/recommended',
	],
	parserOptions: {
		ecmaVersion: 2024,
		sourceType: 'module',
		tsconfigRootDir: __dirname,
		project: ['./tsconfig.json'],
	},
	ignorePatterns: [
		'./dist/**/*',
		'*.backup.*',
		'*.backup',
		'*.bak.*',
		'*.bak',
		'*.local-backup.*',
		'*.local-backup',
		'*.local.*',
		'*.local',
		'*.cjs',
		'node_modules',
	],
	rules: {
		'arrow-spacing': 'warn',
		'comma-dangle': ['warn', 'only-multiline'],
		'comma-style': 'warn',
		indent: ['warn', 'tab', { SwitchCase: 1 }],
		'keyword-spacing': ['warn', { before: true, after: true }],
		'no-array-constructor': 'error',
		'no-class-assign': 'error',
		'no-cond-assign': 'error',
		'no-const-assign': 'error',
		'no-inner-declarations': ['error', 'functions'],
		'no-loops/no-loops': 'warn',
		'no-mixed-spaces-and-tabs': ['warn', 'smart-tabs'],
		'no-new-object': 'error',
		'no-this-before-super': 'error',
		'no-unreachable': 'error',
		'no-var': 'error',
		'no-trailing-spaces': 'warn',
		'object-shorthand': ['warn', 'always'],
		'one-var': ['error', 'never'],
		'padding-line-between-statements': [
			'warn',
			{ blankLine: 'always', prev: 'block', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'block' },
			{ blankLine: 'always', prev: 'block-like', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'block-like' },
			{ blankLine: 'always', prev: 'break', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'break' },
			{ blankLine: 'always', prev: 'case', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'case' },
			{ blankLine: 'always', prev: 'class', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'class' },
			{ blankLine: 'always', prev: 'continue', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'continue' },
			{ blankLine: 'always', prev: 'debugger', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'debugger' },
			{ blankLine: 'always', prev: 'default', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'default' },
			{ blankLine: 'always', prev: 'directive', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'directive' },
			{ blankLine: 'always', prev: 'do', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'do' },
			{ blankLine: 'always', prev: 'export', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'export' },
			{ blankLine: 'always', prev: 'for', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'for' },
			{ blankLine: 'always', prev: 'function', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'function' },
			{ blankLine: 'always', prev: 'if', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'if' },
			{ blankLine: 'always', prev: 'iife', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'iife' },
			{ blankLine: 'always', prev: 'multiline-block-like', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'multiline-block-like' },
			{ blankLine: 'always', prev: 'multiline-const', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'multiline-const' },
			{ blankLine: 'always', prev: 'multiline-let', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'multiline-let' },
			{ blankLine: 'always', prev: '*', next: 'return' },
			{ blankLine: 'always', prev: 'switch', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'switch' },
			{ blankLine: 'always', prev: 'throw', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'throw' },
			{ blankLine: 'always', prev: 'try', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'try' },
			{ blankLine: 'always', prev: '*', next: 'while' },
			{ blankLine: 'always', prev: 'with', next: '*' },
			{ blankLine: 'always', prev: '*', next: 'with' },
		],
		'prefer-arrow-callback': 'error',
		'prefer-const': [
			'error',
			{
				destructuring: 'all',
			},
		],
		'quote-props': ['warn', 'as-needed'],
		semi: ['warn', 'always'],
		'space-before-blocks': ['warn', 'always'],
		'space-before-function-paren': [
			'warn',
			{
				anonymous: 'always',
				asyncArrow: 'always',
				named: 'never',
			},
		],
		'valid-typeof': 'error',
		'@typescript-eslint/no-unused-vars': [
			'warn',
			{
				args: 'all',
				argsIgnorePattern: '^_',
				caughtErrors: 'all',
				caughtErrorsIgnorePattern: '^_',
				destructuredArrayIgnorePattern: '^_',
				varsIgnorePattern: '^_',
				ignoreRestSiblings: true,
			},
		],
	},
};
